{"version":3,"sources":["components/navbar/navbar.jsx","components/catalog/catalog.jsx","components/episode/episode.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","useState","isOpen","setIsOpen","Navbar","color","dark","expand","NavbarBrand","href","NavbarText","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","Catalog","state","episodes","loaded","sort","this","axios","get","then","res","setState","data","videos","catch","err","console","log","array","className","a","b","episode","map","index","nextEpisode","nextEpisodeId","_id","Card","key","inverse","style","backgroundColor","borderColor","CardHeader","to","CardTitle","name","CardImg","top","width","src","image","CardBody","Button","tag","Link","Component","Episode","video","setEpisode","setLoaded","useParams","episodeID","nextEpisodeID","useEffect","border","height","controls","autoPlay","onEnded","window","location","CardFooter","CardSubtitle","App","exact","path","render","props","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"yUAkCeA,EArBF,WAAO,IAAD,EACUC,oBAAS,GADnB,mBACXC,EADW,KACHC,EADG,KAKlB,OACC,kBAACC,EAAA,EAAD,CAAQC,MAAM,OAAOC,MAAI,EAACC,OAAO,MAChC,kBAACC,EAAA,EAAD,CAAaC,KAAK,KAAlB,eACA,kBAACC,EAAA,EAAD,kCACA,kBAACC,EAAA,EAAD,CAAeC,QANF,kBAAMT,GAAWD,MAO9B,kBAACW,EAAA,EAAD,CAAUX,OAAQA,EAAQY,QAAM,GAC/B,kBAACC,EAAA,EAAD,CAAKD,QAAM,GACV,kBAACE,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAASR,KAAK,YAAd,gB,iHC6DSS,E,4MAzEdC,MAAQ,CACPC,SAAU,GACVC,QAAQ,EACRC,MAAM,G,kEAEc,IAAD,OACdC,KAAKJ,MAAME,QACfG,IACEC,IAAI,gBACJC,MAAK,SAACC,GAAD,OACL,EAAKC,SAAS,CAAER,SAAS,YAAKO,EAAIE,KAAKC,QAAST,QAAQ,OAExDU,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAI,sBAAuBF,Q,+BAI5C,IACSG,EAAOb,EADjB,OA0CR,OACC,yBAAKc,UAAU,qBACd,yBAAKA,UAAU,4BACd,yBAAKA,UAAU,uBACd,8CAGF,yBAAKA,UAAU,WACbb,KAAKJ,MAAME,QAAsBE,KAAKJ,MAAMC,UAjD9Be,EAUC,EAAKhB,MAAMC,SAVLE,EAUe,EAAKH,MAAMG,KAT3Ca,EAAMb,MAAK,SAACe,EAAGC,GACrB,OAAIhB,EACIe,EAAEE,QAAUD,EAAEC,QAEdD,EAAEC,QAAUF,EAAEE,YAKiCC,KACvD,SAACD,EAASE,EAAOrB,GAChB,IAAIsB,EAActB,EAAUqB,GAAS,GACjCE,EAAgB,GAIpB,OAHID,IACHC,EAAgBD,EAAYE,KAG5B,kBAACC,EAAA,EAAD,CACCC,IAAKP,EAAQK,IACbG,SAAO,EACPC,MAAO,CAAEC,gBAAiB,OAAQC,YAAa,SAE/C,kBAACC,EAAA,EAAD,KACC,kBAAC,IAAD,CAAMC,GAAE,aAAQb,EAAQK,IAAhB,YAAuBD,IAC9B,kBAACU,EAAA,EAAD,eAAed,EAAQe,KAAvB,YAA+Bf,EAAQA,YAGzC,kBAAC,IAAD,CAAMa,GAAE,aAAQb,EAAQK,IAAhB,YAAuBD,IAC9B,kBAACY,EAAA,EAAD,CAASC,KAAG,EAACC,MAAM,OAAOC,IAAKnB,EAAQoB,SAExC,kBAACC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAAQC,IAAKC,IAAMX,GAAE,aAAQb,EAAQK,IAAhB,YAAuBD,IAA5C,oBAiBsD,S,GAnExCqB,a,wBCwDPC,EAxDD,WAAO,IAAD,EACShE,mBAAS,IADlB,mBACZiE,EADY,KACLC,EADK,OAESlE,oBAAS,GAFlB,mBAEZoB,EAFY,KAEJ+C,EAFI,OAGkBC,cAA7BC,EAHW,EAGXA,UAAWC,EAHA,EAGAA,cASnB,OARAC,qBAAU,WACJnD,GACJG,IAAMC,IAAN,gCAAmC6C,IAAa5C,MAAK,SAACC,GACrDwC,EAAWxC,EAAIE,MACfuC,GAAU,SAKZ,yBAAKhC,UAAU,qBACd,yBAAKA,UAAU,gBACf,yBAAKA,UAAU,iBACd,kBAACS,EAAA,EAAD,CACCE,SAAO,EACPC,MAAO,CACNC,gBAAiB,OACjBwB,OAAQ,SAGT,kBAACb,EAAA,EAAD,KAEqB,MAAfM,EAAMA,MAER,2BACCT,MAAM,OACNiB,OAAO,OACPC,UAAQ,EACRC,UAAQ,EACRC,QAAS,WACJN,IACHO,OAAOC,SAAP,aAAwBR,MAI1B,4BAAQb,IAAG,UAAKQ,EAAMA,UAIjB,4CAIV,kBAACc,EAAA,EAAD,KACC,kBAAC3B,EAAA,EAAD,eAAea,EAAMZ,KAArB,YAA6BY,EAAM3B,UACnC,kBAAC0C,EAAA,EAAD,oBAIH,yBAAK7C,UAAU,mBC/BH8C,MA5Bf,WACC,OACC,kBAAC,IAAD,KACC,yBAAK9C,UAAU,OACd,4BAAQA,UAAU,cACjB,kBAAC,EAAD,OAED,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAO+C,OAAK,EAACC,KAAK,MAClB,kBAAC,IAAD,CAAOA,KAAK,YACX,kBAAC,EAAD,OAED,kBAAC,IAAD,CACCD,OAAK,EACLC,KAAK,gBACLC,OAAQ,SAACC,GAAD,OAAW,kBAAC,EAAYA,MAEjC,kBAAC,IAAD,CACCH,OAAK,EACLC,KAAK,+BACLC,OAAQ,SAACC,GAAD,OAAW,kBAAC,EAAYA,UCdlBC,QACW,cAA7BT,OAAOC,SAASS,UAEe,UAA7BV,OAAOC,SAASS,UAEhBV,OAAOC,SAASS,SAASC,MACvB,2D,MCXNC,IAASL,OACR,kBAAC,IAAMM,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDwHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtE,MAAK,SAAAuE,GACJA,EAAaC,gBAEdnE,OAAM,SAAAoE,GACLlE,QAAQkE,MAAMA,EAAMC,c","file":"static/js/main.b161fdf3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n\tCollapse,\n\tNavbar,\n\tNavbarToggler,\n\tNavbarBrand,\n\tNav,\n\tNavItem,\n\tNavLink,\n\tNavbarText,\n} from \"reactstrap\";\n\nlet NavBar = () => {\n\tconst [isOpen, setIsOpen] = useState(false);\n\n\tconst toggle = () => setIsOpen(!isOpen);\n\n\treturn (\n\t\t<Navbar color=\"dark\" dark expand=\"md\">\n\t\t\t<NavbarBrand href=\"/\">Bentobox TV</NavbarBrand>\n\t\t\t<NavbarText>Stream Anime with a Proxy</NavbarText>\n\t\t\t<NavbarToggler onClick={toggle} />\n\t\t\t<Collapse isOpen={isOpen} navbar>\n\t\t\t\t<Nav navbar>\n\t\t\t\t\t<NavItem>\n\t\t\t\t\t\t<NavLink href=\"/catalog\">Catalog</NavLink>\n\t\t\t\t\t</NavItem>\n\t\t\t\t</Nav>\n\t\t\t</Collapse>\n\t\t</Navbar>\n\t);\n};\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport {\n\tCard,\n\tCardImg,\n\tCardBody,\n\tCardTitle,\n\tCardSubtitle,\n\tCardHeader,\n\tButton,\n} from \"reactstrap\";\n\nclass Catalog extends Component {\n\tstate = {\n\t\tepisodes: [],\n\t\tloaded: false,\n\t\tsort: true,\n\t};\n\tcomponentDidMount() {\n\t\tif (!this.state.loaded) {\n\t\t\taxios\n\t\t\t\t.get(\"/api/catalog\")\n\t\t\t\t.then((res) =>\n\t\t\t\t\tthis.setState({ episodes: [...res.data.videos], loaded: true })\n\t\t\t\t)\n\t\t\t\t.catch((err) => console.log(\"Couldn't Connect...\", err));\n\t\t}\n\t}\n\n\trender() {\n\t\tlet sortVideos = (array, sort) => {\n\t\t\treturn array.sort((a, b) => {\n\t\t\t\tif (sort) {\n\t\t\t\t\treturn a.episode - b.episode;\n\t\t\t\t} else {\n\t\t\t\t\treturn b.episode - a.episode;\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\tlet renderVideos = (array) => {\n\t\t\treturn sortVideos(this.state.episodes, this.state.sort).map(\n\t\t\t\t(episode, index, episodes) => {\n\t\t\t\t\tlet nextEpisode = episodes[(index += 1)];\n\t\t\t\t\tlet nextEpisodeId = \"\";\n\t\t\t\t\tif (nextEpisode) {\n\t\t\t\t\t\tnextEpisodeId = nextEpisode._id;\n\t\t\t\t\t}\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card\n\t\t\t\t\t\t\tkey={episode._id}\n\t\t\t\t\t\t\tinverse\n\t\t\t\t\t\t\tstyle={{ backgroundColor: \"#333\", borderColor: \"#333\" }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CardHeader>\n\t\t\t\t\t\t\t\t<Link to={`/e/${episode._id}/${nextEpisodeId}`}>\n\t\t\t\t\t\t\t\t\t<CardTitle>{`${episode.name} ${episode.episode}`}</CardTitle>\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</CardHeader>\n\t\t\t\t\t\t\t<Link to={`/e/${episode._id}/${nextEpisodeId}`}>\n\t\t\t\t\t\t\t\t<CardImg top width=\"100%\" src={episode.image} />\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t<CardBody>\n\t\t\t\t\t\t\t\t<Button tag={Link} to={`/e/${episode._id}/${nextEpisodeId}`}>\n\t\t\t\t\t\t\t\t\tWatch Now!\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</CardBody>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t);\n\t\t};\n\t\treturn (\n\t\t\t<div className=\"catalog-container\">\n\t\t\t\t<div className=\"catalog-interaction-menu\">\n\t\t\t\t\t<div className=\"catalog-interaction\">\n\t\t\t\t\t\t<strong>Episodes</strong>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"catalog\">\n\t\t\t\t\t{this.state.loaded ? renderVideos(this.state.episodes) : \"\"}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Catalog;\n","import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router\";\nimport axios from \"axios\";\nimport {\n\tCard,\n\tCardImg,\n\tCardBody,\n\tCardTitle,\n\tCardSubtitle,\n\tCardHeader,\n\tButton,\n\tCardFooter,\n} from \"reactstrap\";\nlet Episode = () => {\n\tconst [video, setEpisode] = useState({});\n\tconst [loaded, setLoaded] = useState(false);\n\tconst { episodeID, nextEpisodeID } = useParams();\n\tuseEffect(() => {\n\t\tif (!loaded) {\n\t\t\taxios.get(`/api/episode/?episode=${episodeID}`).then((res) => {\n\t\t\t\tsetEpisode(res.data);\n\t\t\t\tsetLoaded(true);\n\t\t\t});\n\t\t}\n\t});\n\treturn (\n\t\t<div className=\"episode-container\">\n\t\t\t<div className=\"column-left\"></div>\n\t\t\t<div className=\"column-center\">\n\t\t\t\t<Card\n\t\t\t\t\tinverse\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tbackgroundColor: \"#333\",\n\t\t\t\t\t\tborder: \"#333\",\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<CardBody>\n\t\t\t\t\t\t{(() => {\n\t\t\t\t\t\t\tif (video.video != null) {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<video\n\t\t\t\t\t\t\t\t\t\twidth=\"100%\"\n\t\t\t\t\t\t\t\t\t\theight=\"auto\"\n\t\t\t\t\t\t\t\t\t\tcontrols\n\t\t\t\t\t\t\t\t\t\tautoPlay\n\t\t\t\t\t\t\t\t\t\tonEnded={() => {\n\t\t\t\t\t\t\t\t\t\t\tif (nextEpisodeID) {\n\t\t\t\t\t\t\t\t\t\t\t\twindow.location = `/e/${nextEpisodeID}`;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<source src={`${video.video}`}></source>\n\t\t\t\t\t\t\t\t\t</video>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn <div>Loading...</div>;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})()}\n\t\t\t\t\t</CardBody>\n\t\t\t\t\t<CardFooter>\n\t\t\t\t\t\t<CardTitle>{`${video.name} ${video.episode}`}</CardTitle>\n\t\t\t\t\t\t<CardSubtitle>Subtitle</CardSubtitle>\n\t\t\t\t\t</CardFooter>\n\t\t\t\t</Card>\n\t\t\t</div>\n\t\t\t<div className=\"column-right\"></div>\n\t\t</div>\n\t);\n};\nexport default Episode;\n","import React from \"react\";\nimport \"./App.scss\";\nimport NavBar from \"./components/navbar/navbar\";\nimport Catalog from \"./components/catalog/catalog\";\nimport Episode from \"./components/episode/episode\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nfunction App() {\n\treturn (\n\t\t<Router>\n\t\t\t<div className=\"App\">\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t<NavBar />\n\t\t\t\t</header>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path=\"/\"></Route>\n\t\t\t\t\t<Route path=\"/catalog\">\n\t\t\t\t\t\t<Catalog />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route\n\t\t\t\t\t\texact\n\t\t\t\t\t\tpath=\"/e/:episodeID\"\n\t\t\t\t\t\trender={(props) => <Episode {...props} />}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route\n\t\t\t\t\t\texact\n\t\t\t\t\t\tpath=\"/e/:episodeID/:nextEpisodeID\"\n\t\t\t\t\t\trender={(props) => <Episode {...props} />}\n\t\t\t\t\t/>\n\t\t\t\t</Switch>\n\t\t\t</div>\n\t\t</Router>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}